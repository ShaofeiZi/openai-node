/* tslint:disable */
/* eslint-disable */
/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * OpenAI API
 * 用于从和微调语言模型的API
 *
 * OpenAPI文档的版本：1.2.0
 * 
 *
 * 注意：此类是由OpenAPI Generator自动生成的（https://openapi-generator.tech）。
 * https://openapi-generator.tech
 * 不要手动编辑类。
 */
export interface ConfigurationParameters {
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    organization?: string;
    username?: string;
    password?: string;
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    basePath?: string;
    baseOptions?: any;
    formDataCtor?: new () => any;
}

export class Configuration {
    /**
     * apiKey安全性参数
     * @param name 安全名称
     * @memberof Configuration
     */
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    /**
     * OpenAI组织ID
     *
     * @type {string}
     * @memberof Configuration
     */
    organization?: string;
    /**
     * 基本安全参数
     *
     * @type {string}
     * @memberof Configuration
     */
    username?: string;
    /**
     * 基本安全参数
     *
     * @type {string}
     * @memberof Configuration
     */
    password?: string;
    /**
     * oauth2安全性参数
     * @param name 安全名称
     * @param scopes oauth2范围
     * @memberof Configuration
     */
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    /**
     * 覆盖基本路径
     *
     * @type {string}
     * @memberof Configuration
     */
    basePath?: string;
    /**
     * 用于axios调用的基本选项
     *
     * @type {any}
     * @memberof Configuration
     */
    baseOptions?: any;
    /**
     * 将用于创建多部分表单数据的FormData构造函数。您可以在此处注入它，以便不支持FormData类的执行环境仍然可以运行生成的客户端。
     *
     * @type {new () => FormData}
     */
    formDataCtor?: new () => any;

    constructor(param: ConfigurationParameters = {}) {
        this.apiKey = param.apiKey;
        this.organization = param.organization;
        this.username = param.username;
        this.password = param.password;
        this.accessToken = param.accessToken;
        this.basePath = param.basePath;
        this.baseOptions = param.baseOptions;
        this.formDataCtor = param.formDataCtor;

        if (!this.baseOptions) {
            this.baseOptions = {};
        }
        this.baseOptions.headers = {
            'User-Agent': `OpenAI/NodeJS/3.2.1`,
            'Authorization': `Bearer ${this.apiKey}`,
            ...this.baseOptions.headers,
        }
        if (this.organization) {
            this.baseOptions.headers['OpenAI-Organization'] = this.organization;
        }
        if (!this.formDataCtor) {
            this.formDataCtor = require("form-data");
        }
    }

    /**
     * 检查给定的MIME是否为JSON MIME。
     * JSON MIME示例：
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME（多用途互联网邮件扩展）
     * @return 如果给定的MIME是JSON，则为True，否则为false。
     */
    public isJsonMime(mime: string): boolean {
        const jsonMime: RegExp = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
}

